---
title: 2022年末、Rでcsvを読む
emoji: 📄
type: tech
topics:
    - r
published: true
format:
  md:
    variant: gfm+yaml_metadata_block+hard_line_breaks
engine: knitr
knitr:
  opts_chunk:
    comment: "#>"
execute:
  cache: true
---

データの保存先として手軽で身近なcsvやtsvといったプレーンテキスト形式ですが、Rに読み込む方法について、初学者だった数年前に悩まされた覚えがあります。

- 様々なパッケージに関数があり、どれを使えば良いのか分からない。
- 複数のファイルを読み込むにはどうすれば良いのかわからない。

これらについて書かれているインターネット上の情報も古くなっていたりしますので、あえて今まとめてみました。

2022年末版として、つい先日公開された`purrr` 1.0.0や、来月リリース予定の`dplyr` 1.1.0にも触れます。

## サンプルデータ

サンプルとして、`readr`パッケージに含まれているcsvファイルを使います。これらのファイルは`readr::readr_example()`でパスを呼び出せます。

試しに`mini-gapminder-africa.csv`というファイルを読み込んでみましょう。

```{r}
readr::readr_example("mini-gapminder-africa.csv") |>
  read.csv()
```

mini-gapminderというデータのファイルは地域別で5つありますので、それら5つのパスを文字列型のベクトル`paths_csv_examples`として保存し、以下で使用します。

```{r}
paths_csv_examples <- glue::glue(
  "mini-gapminder-{area}.csv",
  area = c("africa", "americas", "asia", "europe", "oceania")
) |>
  purrr::map_chr(readr::readr_example)
```

## csvファイルを読むための関数達

csvファイルを読み込んでデータフレームを作る関数として、主要なものは以下の4つ（5つ）だと思います。

- `utils::read.csv()`
- `data.table::fread()`
- `readr::read_csv()`
- `arrow::read_csv_arrow()`, `arrow::open_dataset()`

それぞれの詳細に行く前に、重要機能の比較を載せておきます。

|                      | read.csv | data.table::fread | readr::read_csv | arrow::read_csv_arrow<br/>arrow::open_dataset |
| -------------------- | :------: | :---------------: | :-------------: | :-------------------------------------------: |
| Shift_JIS対応        |    ○     |         ×         |        ○        |                       ○                       |
| 複数ファイル読み込み |    ×     |         ×         |        ○        |             ○ （`open_dataset`）              |

Shift_JIS対応は今回は読み取り関数なので取り上げていますが、Rからの書き出しに関してはMicrosoft Excelで直で開ければ良いだけであれば`readr::write_excel_csv()`でBOM付きUTF-8にする方法もあります。  
Shift_JISはできるだけ避けていきたいものです。

複数ファイル読み込みについては、非対応の関数を使って読み込む方法も記事の後ろの方に記載しておきます。

載せていない重要な要素である読み込み速度について、私は計っていないため載せていませんが、過去に見たベンチマーク結果[^1][^2]によると`fread()`が最も速く、`read_csv_arrow()`も同じくらい速く、`read_csv()`は少し遅れて、`read.csv()`はかなり遅い、という傾向のようです。  
ただ、読み込み速度はファイルの中身にもよるので、速度で困った場合には`read.csv()`以外をそれぞれ試してみることをおすすめします。

[^1]: [大量で巨大なcsvをRで読み込む時の最適解【vroom,readr,data.table】](https://qiita.com/Ringa_hyj/items/434e3a6794bb7ed8ee14)
[^2]: <https://twitter.com/MattDowle/status/1360073970498875394>、この投稿は`arrow`パッケージ開発者の方が「`read_arrow_csv()`は`fread()`より速い」と発表したことに対する反論で、`data.table`パッケージのNEWSからもリンクされています。

### read.csv

追加のパッケージインストールなしで使える、基本的な関数です。  
後述する他のパッケージを使える状況であればあえて使う必要はないでしょう。

#### 使い方

```{r}
read.csv(paths_csv_examples[1])
```

R 4.0よりも前のバージョンでは`stringsAsFactors`オプションのデフォルト値が`TRUE`なので`stringsAsFactors = FALSE`を明示的に指定しないと後の処理に困るという注意点があります。

Shift_JISなファイルを読み込む場合は以下のようにオプションを指定します。

```{.r}
read.csv("csvファイルのパス", fileEncoding = "Shift_JIS")
```

`fileEncoding = "cp932"`や`fileEncoding = "sjis"`等でも良いようです。

#### 推しポイント

- 追加パッケージなしで使える。

### fread

長い歴史のある`data.table`パッケージの関数で、巨大csvファイルを読み込む際の定番です。

注意点として、日本語環境のWindows版Rは4.2.0（2022年4月リリース）以降UTF-8になったわけですが、今回紹介する中で`fread()`だけはシステムのエンコーディングとUTF-8しか使用できないため、Windows上でもShist_JISのファイルを読み込めなくなってしまったようです。

#### 使い方

```{r}
data.table::fread(paths_csv_examples[1])
```

csvを文字列を直接渡してもちゃんと認識してくれます。

```{r}
"
foo,bar
1,a
2,b
" |>
  data.table::fread()
```

区切り文字の自動判別機能もあります。

```{r}
"
foo   bar
  1     a
  2     b
" |>
  data.table::fread()
```

`readLines()`関数などで取得できる、各要素を行とするベクトルのcsvデータを渡すこともできます（この形式は自動判別できないので`text`引数に明示的に渡す必要があります）。

```{r}
c("foo,bar", "1,a", "2,b") |>
  data.table::fread(text = _)
```

#### 推しポイント

- 多機能。
- 速い。
- 高パフォーマンスを求めるユーザーに長年使用されているため情報が多い。

### read_csv

tidyverseコアパッケージの一つである`readr`の関数です。`readr::read_tsv()`等の兄弟もいます。

2021年7月にリリースされた`readr`バージョン2.0.0で中身が`vroom::vroom()`に切り替わり、読み込み速度が向上し、複数ファイルも読み込めるようになりました。

#### 使い方

```{r}
readr::read_csv(paths_csv_examples[1])
```

複数ファイルを読む場合は、ファイルパスの文字列を収納したベクトルを第1引数に渡すだけです。`id`オプションを使用することで、ファイルパスを列に追加できます。

```{r}
readr::read_csv(paths_csv_examples, id = "file_path")
```

csvを文字列を直接渡してもちゃんと認識してくれます。

```{r}
"
foo,bar
1,a
2,b
" |>
  readr::read_csv()
```

`I()`でラップすることでリテラルデータであることを明示し、各要素を行とするベクトルのcsvデータを渡すこともできます。  
`readr::read_lines()`で読み込んだテキストファイルから`stringr`パッケージの関数などで文字列処理しテーブル部分だけを抜き出した後に`readr::read_csv()`に渡して読み込めたりします。

```{r}
c("foo,bar", "1,a", "2,b") |>
  I() |>
  readr::read_csv()
```

Shift_JISなファイルを読み込む場合は以下のようにオプションを指定します。

```{.r}
readr::read_csv("csvファイルのパス", locale = readr::locale(encoding = "Shift_JIS"))
```

`encoding = "cp932"`や`encoding = "sjis"`等でも良いようです。

#### 推しポイント

- 多機能。
- 複数ファイルを簡単に読み込める。
- tidyverseのコアパッケージなので情報が多い。

### read_csv_arrow & arrow::open_dataset

Apache Arrow C++ライブラリによる読み込みを行う関数です。複数ファイルを読み込む場合は`read_csv_arrow()`の代わりに`open_dataset()`を使用します。

大量のオプションを指定可能なのですがR arrowパッケージのドキュメント上では多くは語られておらず、そもそも指定方法が難解です。  
ほぼ同じ機能を持っているPythonの[`pyarrow.csv.read_csv()`関数](https://arrow.apache.org/docs/python/generated/pyarrow.csv.read_csv.html)等のドキュメントも確認すると良いです。

#### 使い方

デフォルトでは`readr::read_csv()`と同じようにtibble(`tbl_df`クラスオブジェクト)が返されます。

```{r}
arrow::read_csv_arrow(paths_csv_examples[1])
```

後の処理で`arrow`パッケージの関数を使用する場合は`as_data_frame = FALSE`を設定し、Apache Arrowフォーマットである`Table`クラスオブジェクトとして読み込めます。

```{r}
arrow::read_csv_arrow(paths_csv_examples[1], as_data_frame = FALSE)
```

Shift_JISなファイルを読み込む場合は以下のようにオプションを指定します。オプションの指定方法は分かり辛すぎますが、pyarrowと同じです。

```{.r}
arrow::read_csv_arrow("csvファイルのパス", read_options = arrow::CsvReadOptions$create(encoding = "Shift_JIS"))
```

`encoding = "cp932"`や`encoding = "sjis"`等でも良いようです。

複数ファイルを読み込む場合は`arrow::open_dataset()`でオプション`format = "csv"`を指定します。

```{r}
arrow::open_dataset(paths_csv_examples, format = "csv")
```

この時点ではデータセットとしてスキーマ（列名と列の型）しか読み取っていません（余談ですが、複数ファイルを読み込む際に`readr::read_csv()`は列位置を合わせて読み込みますが、`arrow::open_dataset()`は列名を合わせて読み込むためファイル間で列位置が入れ替わっていても正常に読み込めるようです）。

データセットを実際にデータフレームや`arrow::Table`としてメモリに読み込むときには、`dplyr::collect()`や`dplyr::compute()`を使用します（2023年1月リリース予定のバージョン11で`as.data.frame()`も使用可能になるようです）。

```{r}
arrow::open_dataset(paths_csv_examples, format = "csv") |>
  dplyr::compute()
```

ファイル名を列として追加するときには、`dplyr::mutate()`内で`arrow::add_filename()`を実行します。

```{r}
arrow::open_dataset(paths_csv_examples, format = "csv") |>
  dplyr::mutate(file_path = arrow::add_filename()) |>
  dplyr::collect()
```

#### 推しポイント

- 多機能。
- 速い。
- 複数ファイルを簡単に読み込める。

## 複数ファイルを読み込む方法

前述のように`readr::read_csv()`と`arrow::open_dataset()`にはそもそも複数ファイルを読み込む機能があるわけですが、それ以外の関数で複数ファイルを読み込みたい場合の方法

### map_dfr

tidyverseユーザーにとって、複数ファイルを読み込む場合の定番は`purrr::map_dfr()`関数と組み合わせる方法だと思います。[^3]

[^3]: [read all csv files in a directory using `purrr:map()`](https://stackoverflow.com/questions/62598787/read-all-csv-files-in-a-directory-using-purrrmap)

例えば`data.table::fread()`でサンプルcsvファイル5つを読み込んでファイルのパスを列として追加する場合にはこんな感じになります。

```{.r}
paths_csv_examples |>
  purrr::map_dfr(~ data.table::fread(.x)[, file_path := .x])
```

今後もこの方法でも良いのですが、先日リリースされた`purrr` 1.0.0では`map_dfr()`関数の代わりに`purrr::map()`の後で`purrr::list_rbind()`を使う方法が推奨されるようになりました。  
また、purrr-style lambdaと呼ばれる`purrr`等で使用されていた`~ fun(.x)`のような書き方よりも近年R本体に導入された`\(x) fun(x)`という関数の短縮記法が推奨され、`purrr`パッケージ内の例はすべてこの記法に置き換えられました。

というわけで、今後はこんな書き方が増えていくかもしれません。

```{r}
paths_csv_examples |>
  purrr::map(\(path) data.table::fread(path)[, file_path := path]) |>
  purrr::list_rbind()
```

### summarise

`dplyr`の関数達を使って複数ファイルを読み込む方法もあります。

```{.r}
paths_csv_examples |>
  tibble::as_tibble_col(column_name = "file_path") |>
  dplyr::rowwise() |>
  dplyr::summarise(
    file_path,
    data.table::fread(file_path),
    .groups = "drop"
  )
```

2020年5月にリリースされた`dplyr` 1.0.0において`dplyr::summarise()`内でデータフレームを返す関数を使えるようになった際、tidyverseブログで紹介された方法です。[^4]  
経験上`purrr::map()`を使用するのと比べて遅いので私はあまり使いませんけれども、こちらの書き方の方が分かりやすいと感じる方もいらっしゃると思います。

[^4]: [dplyr 1.0.0: new summarise() features](https://www.tidyverse.org/blog/2020/03/dplyr-1-0-0-summarise/#non-summaries)

2023年1月リリース予定の`dplyr` 1.1.0では`dplyr::summarise()`の中で複数行を返す関数を使用すると警告が出るようになり、代わりに`dplyr::reframe()`という関数が追加される予定です。[^5]

[^5]: [dplyr 1.1.0 is coming soon](https://www.tidyverse.org/blog/2022/11/dplyr-1-1-0-is-coming-soon/#reframe-a-generalization-of-summarise)

2022年末時点では`reframe()`という名前に関してフィードバック受付中とのことで名前変更の可能性はあるようですけれども[^6]、現時点での開発版`dplyr`ではこのようになります。

[^6]: [Feedback for alternate names for `reframe()`](https://github.com/tidyverse/dplyr/issues/6565)

```{r}
paths_csv_examples |>
  tibble::as_tibble_col(column_name = "file_path") |>
  dplyr::rowwise() |>
  dplyr::reframe(
    file_path,
    data.table::fread(file_path),
  )
```

グループ化は自動的に解除されるようになったので`dplyr::ungroup()`や`.groups = "drop"`を書く必要はなくなったのがちょっと嬉しいです。

## まとめ

巨大なcsvファイルは一刻も早くParquetに置換してしまいましょう。

## 実行環境

```{r}
sessionInfo()
```
